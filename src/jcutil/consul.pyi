from enum import Enum
from typing import Any, Callable, Dict, NoReturn, Optional

import consul  # 明确导入consul模块

class ConfigFormat(Enum):
    Text: Callable
    Number: Callable
    Int: Callable
    Float: Callable
    Json: Callable
    Yaml: Callable
    Hcl: Callable

def path_join(*args: str) -> str: ...

def fetch_key(key_path: str, fmt: Callable = None, client: Optional['ConsulClient'] = None) -> Any: ...

def register_service(service_name: str, **kwargs) -> NoReturn: ...

def deregister(service_id) -> NoReturn: ...

class KvProperty:
  def __init__(self, key: str, /, prefix: str = None, namespace: str = None, format: callable = None, cached: bool = None) -> None: ...

class ConsulClient:
  def __init__(self, host: str = '127.0.0.1', port: int = 8500, token: str = None,
               scheme: str = 'http', consistency: str = 'default',
               dc: str = None, verify: bool = True) -> None: ...
  @property
  def client(self) -> consul.Consul: ...
  def kv_get(self, key: str, **kwargs) -> Any: ...
  def kv_put(self, key: str, value: str, **kwargs) -> bool: ...
  def service_register(self, name: str, **kwargs) -> None: ...
  def service_deregister(self, service_id: str) -> None: ...
  def services(self) -> Dict: ...
